import React, { useState, useEffect } from 'react';
import { X, Zap, Gem, AlertTriangle, TrendingUp } from 'lucide-react';

const EnhancementModal = ({ 
  showModal, 
  setShowModal, 
  isDarkMode,
  equipment,
  equipmentType, // 'fishingRod' or 'accessory'
  userAmber,
  onEnhance,
  currentEnhancementLevel = 0,
  currentFailCount = 0
}) => {
  const [isEnhancing, setIsEnhancing] = useState(false);
  const [progress, setProgress] = useState(0);
  const [enhancementResult, setEnhancementResult] = useState(null);
  
  // Ìïú Î≤àÏóê Ìïú Î†àÎ≤®Ïî©Îßå Í∞ïÌôî
  const targetLevel = currentEnhancementLevel + 1;

  // Í∞ïÌôî Í≥µÏãù: f(x) = 0.2x¬≥ - 0.4x¬≤ + 1.6x
  const calculateEnhancementBonus = (level) => {
    if (level <= 0) return 0;
    return 0.2 * Math.pow(level, 3) - 0.4 * Math.pow(level, 2) + 1.6 * level;
  };

  // Ïû•ÎπÑ Îì±Í∏âÎ≥Ñ Í∞ïÌôî ÎπÑÏö© Î∞∞Ïú® (3Ï∞®Î∞©Ï†ïÏãù: f(x) = 0.1x¬≥ - 0.5x¬≤ + 2x + 0.4)
  const getEquipmentGradeMultiplier = (equipmentName, equipmentType) => {
    if (equipmentType === 'fishingRod') {
      const fishingRodOrder = [
        'ÎÇòÎ¨¥ÎÇöÏãúÎåÄ', 'ÎÇ°ÏùÄÎÇöÏãúÎåÄ', 'Í∏∞Î≥∏ÎÇöÏãúÎåÄ', 'Îã®Îã®ÌïúÎÇöÏãúÎåÄ', 'ÏùÄÎÇöÏãúÎåÄ',
        'Í∏àÎÇöÏãúÎåÄ', 'Í∞ïÏ≤†ÎÇöÏãúÎåÄ', 'ÏÇ¨ÌååÏù¥Ïñ¥ÎÇöÏãúÎåÄ', 'Î£®ÎπÑÎÇöÏãúÎåÄ', 'Îã§Ïù¥ÏïÑÎ™¨ÎìúÎÇöÏãúÎåÄ',
        'Î†àÎìúÎã§Ïù¥ÏïÑÎ™¨ÎìúÎÇöÏãúÎåÄ', 'Î≤öÍΩÉÎÇöÏãúÎåÄ', 'ÍΩÉÎßùÏö∏ÎÇöÏãúÎåÄ', 'Ìò∏Î°±Î∂àÎÇöÏãúÎåÄ', 'ÏÇ∞Í≥†Îì±ÎÇöÏãúÎåÄ',
        'ÌîºÌÅ¨Îãâ', 'ÎßàÎÖÄÎπóÏûêÎ£®', 'ÏóêÌÖåÎ•¥ÎÇöÏãúÎåÄ', 'Î≥ÑÏ°∞Í∞ÅÎÇöÏãúÎåÄ', 'Ïó¨Ïö∞Íº¨Î¶¨ÎÇöÏãúÎåÄ',
        'Ï¥àÏΩúÎ¶øÎ°§ÎÇöÏãúÎåÄ', 'Ìò∏Î∞ïÏú†Î†πÎÇöÏãúÎåÄ', 'ÌïëÌÅ¨Î≤ÑÎãàÎÇöÏãúÎåÄ', 'Ìï†Î°úÏö∞ÎÇöÏãúÎåÄ', 'Ïó¨Ïö∞Î∂àÎÇöÏãúÎåÄ'
      ];
      const grade = fishingRodOrder.indexOf(equipmentName);
      console.log('üé£ ÎÇöÏãúÎåÄ Îì±Í∏â Í≥ÑÏÇ∞:', { equipmentName, grade, equipmentType });
      if (grade === -1) {
        console.log('‚ùå ÎÇöÏãúÎåÄÎ•º Ï∞æÏùÑ Ïàò ÏóÜÏùå:', equipmentName);
        return 1.0;
      }
      // 3Ï∞®Î∞©Ï†ïÏãù: f(x) = 0.1x¬≥ - 0.35x¬≤ + 1.7x + 0.4
      const multiplier = Math.max(1.0, 0.1 * Math.pow(grade, 3) - 0.35 * Math.pow(grade, 2) + 1.7 * grade + 0.4);
      console.log('üìä ÎÇöÏãúÎåÄ Î∞∞Ïú®:', multiplier);
      return multiplier;
    } else if (equipmentType === 'accessory') {
      const accessoryOrder = [
        'ÎÇòÎ¨¥Î™©Í±∏Ïù¥', 'Íµ¨Î¶¨Î™©Í±∏Ïù¥', 'ÏùÄÎ™©Í±∏Ïù¥', 'Í∏àÎ™©Í±∏Ïù¥', 'Í∞ïÏ≤†Î™©Í±∏Ïù¥',
        'ÏÇ¨ÌååÏù¥Ïñ¥Î™©Í±∏Ïù¥', 'Î£®ÎπÑÎ™©Í±∏Ïù¥', 'Îã§Ïù¥ÏïÑÎ™¨ÎìúÎ™©Í±∏Ïù¥', 'Î†àÎìúÎã§Ïù¥ÏïÑÎ™¨ÎìúÎ™©Í±∏Ïù¥', 'Î≤öÍΩÉÎ™©Í±∏Ïù¥',
        'ÍΩÉÎßùÏö∏Î™©Í±∏Ïù¥', 'Ìò∏Î°±Î∂àÎ™©Í±∏Ïù¥', 'ÏÇ∞Í≥†Îì±Î™©Í±∏Ïù¥', 'ÌîºÌÅ¨ÎãâÎ™©Í±∏Ïù¥', 'ÎßàÎÖÄÎπóÏûêÎ£®Î™©Í±∏Ïù¥',
        'ÏóêÌÖåÎ•¥ÎÇòÎ¨¥Î¨òÎ™©', 'Î≥ÑÏ°∞Í∞ÅÎ™©Í±∏Ïù¥', 'Ïó¨Ïö∞Íº¨Î¶¨Î™©Í±∏Ïù¥', 'Ï¥àÏΩúÎ¶øÎ°§Î™©Í±∏Ïù¥', 'Ìò∏Î∞ïÏú†Î†πÎ™©Í±∏Ïù¥',
        'ÌïëÌÅ¨Î≤ÑÎãàÎ™©Í±∏Ïù¥', 'Ìï†Î°úÏö∞Î™©Í±∏Ïù¥', 'Ïó¨Ïö∞Î∂àÎ™©Í±∏Ïù¥', 'Î™ΩÎßàÏùòÏ°∞Í∞ÅÏÉÅ', 'ÎßàÏπ¥Î°±ÌõàÏû•', 'ÎπõÎÇòÎäîÎßàÎ†•ÏàúÌôòÏ≤¥'
      ];
      const grade = accessoryOrder.indexOf(equipmentName);
      console.log('üíé ÏïÖÏÑ∏ÏÇ¨Î¶¨ Îì±Í∏â Í≥ÑÏÇ∞:', { equipmentName, grade, equipmentType });
      if (grade === -1) {
        console.log('‚ùå ÏïÖÏÑ∏ÏÇ¨Î¶¨Î•º Ï∞æÏùÑ Ïàò ÏóÜÏùå:', equipmentName);
        return 1.0;
      }
      // 3Ï∞®Î∞©Ï†ïÏãù: f(x) = 0.1x¬≥ - 0.35x¬≤ + 1.7x + 0.4
      const multiplier = Math.max(1.0, 0.1 * Math.pow(grade, 3) - 0.35 * Math.pow(grade, 2) + 1.7 * grade + 0.4);
      console.log('üìä ÏïÖÏÑ∏ÏÇ¨Î¶¨ Î∞∞Ïú®:', multiplier);
      return multiplier;
    }
    return 1.0;
  };

  // Í∞ïÌôîÏóê ÌïÑÏöîÌïú Ìò∏Î∞ïÏÑù Í≥ÑÏÇ∞: Í≥µÏãù * 1 * Ïû•ÎπÑÎì±Í∏âÎ∞∞Ïú® (90% Ìï†Ïù∏)
  const calculateRequiredAmber = (level, equipmentName, equipmentType) => {
    if (level <= 0) return 0;
    const baseCost = calculateEnhancementBonus(level) * 1; // 90% Ìï†Ïù∏ (10 ‚Üí 1)
    const gradeMultiplier = getEquipmentGradeMultiplier(equipmentName, equipmentType);
    return Math.ceil(baseCost * gradeMultiplier);
  };

  // Í∞ïÌôî ÏÑ±Í≥µ ÌôïÎ•† Í≥ÑÏÇ∞
  const calculateEnhancementSuccessRate = (currentLevel, failCount = 0) => {
    let baseRate;
    
    if (currentLevel === 0) {
      baseRate = 100; // 0Í∞ï ‚Üí 1Í∞ï: 100%
    } else {
      // 1Í∞ïÎ∂ÄÌÑ∞: 95%, 90%, 85%, 80%, ... (ÏµúÏÜå 5%)
      baseRate = Math.max(5, 100 - (currentLevel * 5));
    }
    
    // Ïã§Ìå® ÌöüÏàòÏóê Îî∞Î•∏ ÌôïÎ•† Ï¶ùÍ∞Ä: ÏõêÎûòÌôïÎ•† + (Í∏∞Î≥∏ÌôïÎ•† * 0.01 * Ïã§Ìå®ÌöüÏàò)
    const bonusRate = baseRate * 0.01 * failCount;
    const finalRate = Math.min(100, baseRate + bonusRate);
    
    return {
      baseRate,
      bonusRate,
      finalRate
    };
  };

  // ÎàÑÏ†Å Î≥¥ÎÑàÏä§ Í≥ÑÏÇ∞
  const calculateTotalBonus = (level) => {
    let totalBonus = 0;
    for (let i = 1; i <= level; i++) {
      totalBonus += calculateEnhancementBonus(i);
    }
    return Math.floor(totalBonus);
  };

  const amberCost = calculateRequiredAmber(targetLevel, equipment.name, equipmentType);
  
  // ÎîîÎ≤ÑÍπÖÏö© Î°úÍ∑∏ Ï∂îÍ∞Ä
  console.log('üîç Í∞ïÌôî ÎπÑÏö© Í≥ÑÏÇ∞ ÎîîÎ≤ÑÍπÖ:', {
    equipmentName: equipment.name,
    equipmentType,
    targetLevel,
    enhancementBonus: calculateEnhancementBonus(targetLevel),
    gradeMultiplier: getEquipmentGradeMultiplier(equipment.name, equipmentType),
    baseCost: calculateEnhancementBonus(targetLevel) * 1,
    finalCost: amberCost
  });
  const currentTotalBonus = calculateTotalBonus(currentEnhancementLevel);
  const targetTotalBonus = calculateTotalBonus(targetLevel);
  const bonusIncrease = targetTotalBonus - currentTotalBonus;
  
  // Í∞ïÌôî ÏÑ±Í≥µ ÌôïÎ•† Ï†ïÎ≥¥
  const successRateInfo = calculateEnhancementSuccessRate(currentEnhancementLevel, currentFailCount);
  const { baseRate, bonusRate, finalRate } = successRateInfo;

  const canAfford = userAmber >= amberCost;

  const handleEnhance = async () => {
    // Í∞ïÌôî ÏãúÏûë Ï†ÑÏóê Ìò∏Î∞ïÏÑù Î∂ÄÏ°± Ï≤¥ÌÅ¨
    if (!canAfford) {
      alert(`Ìò∏Î∞ïÏÑùÏù¥ Î∂ÄÏ°±Ìï©ÎãàÎã§!\nÌïÑÏöî: ${amberCost.toLocaleString()}Í∞ú\nÎ≥¥Ïú†: ${userAmber.toLocaleString()}Í∞ú`);
      return;
    }
    
    if (isEnhancing) return;

    setIsEnhancing(true);
    setProgress(0);
    setEnhancementResult(null);
    
    try {
      console.log(`üî® Í∞ïÌôî ÏãúÎèÑ: ${equipmentType} ${currentEnhancementLevel} ‚Üí ${targetLevel}, ÎπÑÏö©: ${amberCost}`);
      console.log(`üìä Ï†ÑÏÜ° Îç∞Ïù¥ÌÑ∞:`, { 
        equipmentType, 
        targetLevel, 
        amberCost, 
        currentEnhancementLevel,
        equipmentName: equipment.name,
        gradeMultiplier: getEquipmentGradeMultiplier(equipment.name, equipmentType)
      });
      console.log(`üíé Ìò∏Î∞ïÏÑù Ï≤¥ÌÅ¨: Î≥¥Ïú†=${userAmber}, ÌïÑÏöî=${amberCost}, Ï∂©Î∂Ñ=${canAfford}`);
      
      // Î®ºÏ†Ä Í∞ïÌôî ÏöîÏ≤≠ÏùÑ Î≥¥ÎÇ¥Í≥† ÏùëÎãµÏùÑ Í∏∞Îã§Î¶º (Ìò∏Î∞ïÏÑù Î∂ÄÏ°± Îì± Ï¶âÏãú Ï≤¥ÌÅ¨)
      const enhancePromise = onEnhance(equipmentType, targetLevel, amberCost);
      
      // 5Ï¥à ÌîÑÎ°úÍ∑∏Î†àÏä§Î∞î Ïï†ÎãàÎ©îÏù¥ÏÖò
      const progressInterval = setInterval(() => {
        setProgress(prev => {
          if (prev >= 100) {
            clearInterval(progressInterval);
            return 100;
          }
          return prev + 2; // 50Îã®Í≥ÑÎ°ú ÎÇòÎàÑÏñ¥ 5Ï¥à (100ms * 50 = 5Ï¥à)
        });
      }, 100);
      
      // 5Ï¥à ÌõÑ Í≤∞Í≥º Ï≤òÎ¶¨
      setTimeout(async () => {
        try {
          const result = await enhancePromise;
          setEnhancementResult(result);
          
          // Í≤∞Í≥º ÌëúÏãú ÌõÑ 2Ï¥à Îí§Ïóê Î™®Îã¨ Ï≤òÎ¶¨
          setTimeout(() => {
            if (result === true) {
              setShowModal(false);
            }
            setIsEnhancing(false);
            setProgress(0);
            setEnhancementResult(null);
          }, 2000);
          
        } catch (error) {
          console.error('Í∞ïÌôî Ïã§Ìå®:', error);
          setEnhancementResult(false);
          setTimeout(() => {
            setIsEnhancing(false);
            setProgress(0);
            setEnhancementResult(null);
          }, 2000);
        }
      }, 5000);
      
    } catch (error) {
      console.error('Í∞ïÌôî Ïã§Ìå®:', error);
      setIsEnhancing(false);
      setProgress(0);
      setEnhancementResult(null);
    }
  };

  if (!showModal) return null;

  return (
    <div className="fixed inset-0 bg-black/50 backdrop-blur-sm flex items-center justify-center z-50 p-4">
      <div className={`max-w-md w-full rounded-2xl overflow-hidden ${
        isDarkMode 
          ? "glass-card border border-white/10" 
          : "bg-white/95 backdrop-blur-md border border-gray-300/30"
      }`}>
        {/* Ìó§Îçî */}
        <div className={`p-6 border-b ${
          isDarkMode ? "border-white/10" : "border-gray-300/20"
        }`}>
          <div className="flex items-center justify-between">
            <div className="flex items-center gap-3">
              <div className={`flex items-center justify-center w-10 h-10 rounded-full ${
                equipmentType === 'fishingRod' 
                  ? "bg-gradient-to-br from-blue-500/20 to-cyan-500/20"
                  : "bg-gradient-to-br from-purple-500/20 to-pink-500/20"
              }`}>
                {equipmentType === 'fishingRod' ? (
                  <Zap className={`w-5 h-5 ${
                    isDarkMode ? "text-blue-400" : "text-blue-600"
                  }`} />
                ) : (
                  <Gem className={`w-5 h-5 ${
                    isDarkMode ? "text-purple-400" : "text-purple-600"
                  }`} />
                )}
              </div>
              <div>
                <h2 className={`text-lg font-bold ${
                  isDarkMode ? "text-white" : "text-gray-800"
                }`}>Ïû•ÎπÑ Í∞ïÌôî</h2>
                <p className={`text-sm ${
                  isDarkMode ? "text-gray-400" : "text-gray-600"
                }`}>{equipment}</p>
              </div>
            </div>
            <button
              onClick={() => setShowModal(false)}
              className={`p-2 rounded-full transition-all duration-300 ${
                isDarkMode 
                  ? "hover:bg-white/10 text-gray-400 hover:text-white" 
                  : "hover:bg-gray-100 text-gray-600 hover:text-gray-800"
              }`}
            >
              <X className="w-5 h-5" />
            </button>
          </div>
        </div>

        {/* Ïª®ÌÖêÏ∏† */}
        <div className="p-6 space-y-6">
          {/* ÌòÑÏû¨ ÏÉÅÌÉú */}
          <div className={`p-4 rounded-lg ${
            isDarkMode ? "bg-gray-800/50 border border-gray-700/30" : "bg-gray-100/80 border border-gray-300/30"
          }`}>
            <div className="flex items-center justify-between mb-2">
              <span className={`text-sm font-medium ${
                isDarkMode ? "text-gray-300" : "text-gray-700"
              }`}>ÌòÑÏû¨ Í∞ïÌôî Î†àÎ≤®</span>
              <span className={`text-lg font-bold ${
                isDarkMode ? "text-white" : "text-gray-800"
              }`}>+{currentEnhancementLevel}</span>
            </div>
            <div className="flex items-center justify-between">
              <span className={`text-sm font-medium ${
                isDarkMode ? "text-gray-300" : "text-gray-700"
              }`}>
                ÌòÑÏû¨ Ï∂îÍ∞Ä {equipmentType === 'fishingRod' ? 'Í≥µÍ≤©Î†•' : 'Ï≤¥Î†•'}
              </span>
              <span className={`text-sm font-bold ${
                equipmentType === 'fishingRod' 
                  ? isDarkMode ? "text-blue-400" : "text-blue-600"
                  : isDarkMode ? "text-purple-400" : "text-purple-600"
              }`}>
                +{currentTotalBonus}
              </span>
            </div>
          </div>

          {/* Í∞ïÌôî ÏÑ±Í≥µ ÌôïÎ•† */}
          <div className={`p-4 rounded-lg ${
            isDarkMode ? "bg-blue-500/10 border border-blue-400/30" : "bg-blue-50 border border-blue-300/50"
          }`}>
            <div className="flex items-center gap-2 mb-3">
              <div className={`text-2xl ${finalRate >= 50 ? 'üéØ' : finalRate >= 20 ? 'üé≤' : 'üî•'}`}></div>
              <div>
                <div className={`text-lg font-bold ${
                  isDarkMode ? "text-blue-400" : "text-blue-600"
                }`}>
                  ÏÑ±Í≥µ ÌôïÎ•†: {finalRate.toFixed(1)}%
                </div>
                <div className={`text-xs ${
                  isDarkMode ? "text-gray-400" : "text-gray-600"
                }`}>
                  +{currentEnhancementLevel} ‚Üí +{targetLevel}
                </div>
              </div>
            </div>
            
            {/* ÌôïÎ•† ÏÑ∏Î∂Ä Ï†ïÎ≥¥ */}
            <div className="space-y-1 text-sm">
              <div className="flex justify-between">
                <span className={`${isDarkMode ? "text-gray-300" : "text-gray-700"}`}>
                  Í∏∞Î≥∏ ÌôïÎ•†
                </span>
                <span className={`font-medium ${isDarkMode ? "text-white" : "text-gray-800"}`}>
                  {baseRate}%
                </span>
              </div>
              {bonusRate > 0 && (
                <div className="flex justify-between">
                  <span className={`${isDarkMode ? "text-gray-300" : "text-gray-700"}`}>
                    Ïã§Ìå® Î≥¥ÎÑàÏä§ ({currentFailCount}Ìöå)
                  </span>
                  <span className={`font-medium ${isDarkMode ? "text-green-400" : "text-green-600"}`}>
                    +{bonusRate.toFixed(1)}%
                  </span>
                </div>
              )}
              <div className={`border-t pt-1 mt-2 ${
                isDarkMode ? "border-gray-600" : "border-gray-300"
              }`}>
                <div className="flex justify-between">
                  <span className={`font-medium ${isDarkMode ? "text-gray-200" : "text-gray-800"}`}>
                    ÏµúÏ¢Ö ÌôïÎ•†
                  </span>
                  <span className={`font-bold text-lg ${
                    isDarkMode ? "text-blue-400" : "text-blue-600"
                  }`}>
                    {finalRate.toFixed(1)}%
                  </span>
                </div>
              </div>
            </div>
          </div>

          {/* Í∞ïÌôî Í≤∞Í≥º ÎØ∏Î¶¨Î≥¥Í∏∞ */}
          <div className={`p-4 rounded-lg border-2 ${
            isDarkMode 
              ? "bg-gradient-to-r from-green-500/10 to-emerald-500/10 border-green-400/30" 
              : "bg-gradient-to-r from-green-50 to-emerald-50 border-green-300/50"
          }`}>
            <div className="flex items-center gap-2 mb-3">
              <TrendingUp className={`w-4 h-4 ${
                isDarkMode ? "text-green-400" : "text-green-600"
              }`} />
              <span className={`text-sm font-medium ${
                isDarkMode ? "text-green-400" : "text-green-600"
              }`}>Í∞ïÌôî ÌõÑ Ìö®Í≥º</span>
            </div>
            <div className="space-y-2">
              <div className="flex items-center justify-between">
                <span className={`text-sm ${
                  isDarkMode ? "text-gray-300" : "text-gray-700"
                }`}>
                  Ï∂îÍ∞Ä {equipmentType === 'fishingRod' ? 'Í≥µÍ≤©Î†•' : 'Ï≤¥Î†•'}
                </span>
                <div className="flex items-center gap-2">
                  <span className={`text-sm ${
                    isDarkMode ? "text-gray-400" : "text-gray-600"
                  }`}>
                    +{currentTotalBonus}
                  </span>
                  <span className={`text-sm ${
                    isDarkMode ? "text-gray-500" : "text-gray-400"
                  }`}>‚Üí</span>
                  <span className={`text-sm font-bold ${
                    isDarkMode ? "text-green-400" : "text-green-600"
                  }`}>
                    +{targetTotalBonus}
                  </span>
                </div>
              </div>
              <div className="flex items-center justify-between">
                <span className={`text-sm ${
                  isDarkMode ? "text-gray-300" : "text-gray-700"
                }`}>Ï¶ùÍ∞ÄÎüâ</span>
                <span className={`text-sm font-bold ${
                  isDarkMode ? "text-green-400" : "text-green-600"
                }`}>
                  +{Math.floor(bonusIncrease)}
                </span>
              </div>
            </div>
          </div>

          {/* ÎπÑÏö© */}
          <div className={`p-4 rounded-lg ${
            isDarkMode ? "bg-gray-800/50 border border-gray-700/30" : "bg-gray-100/80 border border-gray-300/30"
          }`}>
            <div className="flex items-center justify-between mb-2">
              <span className={`text-sm font-medium ${
                isDarkMode ? "text-gray-300" : "text-gray-700"
              }`}>ÌïÑÏöîÌïú Ìò∏Î∞ïÏÑù {getEquipmentGradeMultiplier(equipment.name, equipmentType) > 1.0 ? `(Îì±Í∏âÎ∞∞Ïú®: ${getEquipmentGradeMultiplier(equipment.name, equipmentType)}x)` : ''}</span>
              <div className="flex items-center gap-2">
                <Gem className={`w-4 h-4 ${
                  isDarkMode ? "text-orange-400" : "text-orange-600"
                }`} />
                <span className={`text-sm font-bold ${
                  canAfford 
                    ? isDarkMode ? "text-white" : "text-gray-800"
                    : isDarkMode ? "text-red-400" : "text-red-600"
                }`}>
                  {amberCost.toLocaleString()}
                </span>
              </div>
            </div>
            <div className="flex items-center justify-between">
              <span className={`text-sm font-medium ${
                isDarkMode ? "text-gray-300" : "text-gray-700"
              }`}>Î≥¥Ïú† Ìò∏Î∞ïÏÑù</span>
              <span className={`text-sm font-bold ${
                isDarkMode ? "text-orange-400" : "text-orange-600"
              }`}>
                {userAmber.toLocaleString()}
              </span>
            </div>
          </div>

          {/* Í≤ΩÍ≥† Î©îÏãúÏßÄ */}
          {!canAfford && (
            <div className={`p-3 rounded-lg flex items-center gap-2 ${
              isDarkMode 
                ? "bg-red-500/10 border border-red-400/30" 
                : "bg-red-50 border border-red-300/50"
            }`}>
              <AlertTriangle className={`w-4 h-4 ${
                isDarkMode ? "text-red-400" : "text-red-600"
              }`} />
              <span className={`text-sm ${
                isDarkMode ? "text-red-400" : "text-red-600"
              }`}>
                Ìò∏Î∞ïÏÑùÏù¥ Î∂ÄÏ°±Ìï©ÎãàÎã§
              </span>
            </div>
          )}

          {/* ÌîÑÎ°úÍ∑∏Î†àÏä§Î∞î (Í∞ïÌôî Ï§ëÏùº ÎïåÎßå ÌëúÏãú) */}
          {isEnhancing && (
            <div className={`p-4 rounded-lg ${
              isDarkMode ? "bg-gray-800/50 border border-gray-700/30" : "bg-gray-100/80 border border-gray-300/30"
            }`}>
              <div className="flex items-center justify-center mb-2">
                <span className={`text-sm font-medium ${
                  isDarkMode ? "text-gray-300" : "text-gray-700"
                }`}>Í∞ïÌôî ÏßÑÌñâ Ï§ë...</span>
              </div>
              
              {/* ÌîÑÎ°úÍ∑∏Î†àÏä§Î∞î */}
              <div className={`w-full h-4 rounded-full overflow-hidden ${
                isDarkMode ? "bg-gray-700" : "bg-gray-200"
              }`}>
                <div
                  className={`h-full transition-all duration-100 ease-out ${
                    progress < 100 
                      ? "bg-gradient-to-r from-blue-500 to-cyan-500"
                      : enhancementResult === true
                        ? "bg-gradient-to-r from-green-500 to-emerald-500"
                        : enhancementResult === false
                          ? "bg-gradient-to-r from-red-500 to-red-600"
                          : "bg-gradient-to-r from-yellow-500 to-orange-500"
                  }`}
                  style={{ width: `${progress}%` }}
                ></div>
              </div>
              
              {/* Í≤∞Í≥º ÌëúÏãú */}
              {progress >= 100 && enhancementResult !== null && (
                <div className={`mt-3 text-center text-sm font-bold ${
                  enhancementResult === true
                    ? isDarkMode ? "text-green-400" : "text-green-600"
                    : isDarkMode ? "text-red-400" : "text-red-600"
                }`}>
                  {enhancementResult === true ? 'üéâ Í∞ïÌôî ÏÑ±Í≥µ!' : 'üí• Í∞ïÌôî Ïã§Ìå®...'}
                </div>
              )}
            </div>
          )}

          {/* Í∞ïÌôî Î≤ÑÌäº */}
          <button
            onClick={handleEnhance}
            disabled={!canAfford || isEnhancing}
            className={`w-full py-3 px-4 rounded-lg font-medium transition-all duration-300 ${
              canAfford && !isEnhancing
                ? isDarkMode
                  ? "bg-gradient-to-r from-green-500 to-emerald-500 hover:from-green-600 hover:to-emerald-600 text-white"
                  : "bg-gradient-to-r from-green-500 to-emerald-500 hover:from-green-600 hover:to-emerald-600 text-white"
                : isDarkMode
                  ? "bg-gray-700/50 text-gray-500 cursor-not-allowed"
                  : "bg-gray-300/50 text-gray-500 cursor-not-allowed"
            }`}
          >
            {isEnhancing ? 'Í∞ïÌôî Ï§ë...' : `+${targetLevel} Í∞ïÌôî ÏãúÎèÑ (${finalRate.toFixed(1)}%)`}
          </button>
        </div>
      </div>
    </div>
  );
};

export default EnhancementModal;
