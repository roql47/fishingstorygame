// 서버 코드에 추가할 동료 시스템

// StarPieceModel 다음에 추가:
// Companion Schema (동료 시스템)
const companionSchema = new mongoose.Schema(
  {
    userId: { type: String, required: true },
    username: { type: String, required: true },
    userUuid: { type: String, index: true },
    companions: [{ type: String }], // 보유한 동료 이름 배열
  },
  { timestamps: true }
);

const CompanionModel = mongoose.model("Companion", companionSchema);

// 동료 목록 정의 (상수)
const COMPANION_LIST = [
  "실", "피에나", "애비게일", "림스&베리", "클로에", "나하트라"
];

// API 추가 위치: 다른 API들과 함께

// 동료 뽑기 API
app.post("/api/recruit-companion", async (req, res) => {
  try {
    const { starPieceCost = 10 } = req.body; // 별조각 10개 기본 비용
    const { username, userUuid } = req.query;
    
    console.log("Recruit companion request:", { starPieceCost, username, userUuid });
    
    // 사용자 별조각 확인
    const queryResult = await getUserQuery('user', username, userUuid);
    let query;
    if (queryResult.userUuid) {
      query = { userUuid: queryResult.userUuid };
      console.log("Using UUID query for recruit:", query);
    } else {
      query = queryResult;
      console.log("Using fallback query for recruit:", query);
    }
    
    const userStarPieces = await StarPieceModel.findOne(query);
    if (!userStarPieces || userStarPieces.starPieces < starPieceCost) {
      console.log(`Not enough star pieces: has ${userStarPieces?.starPieces || 0}, needs ${starPieceCost}`);
      return res.status(400).json({ error: "별조각이 부족합니다." });
    }
    
    // 보유 동료 확인
    let userCompanions = await CompanionModel.findOne(query);
    if (!userCompanions) {
      const createData = {
        userId: query.userId || 'user',
        username: query.username || username,
        userUuid: query.userUuid || userUuid,
        companions: []
      };
      console.log("Creating new companion record:", createData);
      userCompanions = new CompanionModel(createData);
    }
    
    // 미보유 동료 목록
    const availableCompanions = COMPANION_LIST.filter(
      companion => !userCompanions.companions.includes(companion)
    );
    
    console.log("Available companions:", availableCompanions);
    
    if (availableCompanions.length === 0) {
      return res.status(400).json({ error: "모든 동료를 이미 보유하고 있습니다." });
    }
    
    // 별조각 차감
    userStarPieces.starPieces -= starPieceCost;
    await userStarPieces.save();
    console.log(`Deducted ${starPieceCost} star pieces. Remaining: ${userStarPieces.starPieces}`);
    
    // 15% 확률로 동료 획득
    const success = Math.random() < 0.15;
    console.log("Recruitment attempt:", { success, probability: "15%" });
    
    if (success) {
      // 랜덤 동료 선택
      const randomCompanion = availableCompanions[
        Math.floor(Math.random() * availableCompanions.length)
      ];
      
      userCompanions.companions.push(randomCompanion);
      await userCompanions.save();
      
      console.log(`Successfully recruited: ${randomCompanion}`);
      
      res.json({
        success: true,
        recruited: true,
        companion: randomCompanion,
        remainingStarPieces: userStarPieces.starPieces,
        totalCompanions: userCompanions.companions.length
      });
    } else {
      console.log("Recruitment failed");
      res.json({
        success: true,
        recruited: false,
        remainingStarPieces: userStarPieces.starPieces
      });
    }
  } catch (error) {
    console.error("Failed to recruit companion:", error);
    res.status(500).json({ error: "동료 모집에 실패했습니다." });
  }
});

// 보유 동료 조회 API
app.get("/api/companions/:userId", async (req, res) => {
  try {
    const { userId } = req.params;
    const { username, userUuid } = req.query;
    
    console.log("Companions request:", { userId, username, userUuid });
    
    const queryResult = await getUserQuery(userId, username, userUuid);
    let query;
    if (queryResult.userUuid) {
      query = { userUuid: queryResult.userUuid };
      console.log("Using UUID query for companions:", query);
    } else {
      query = queryResult;
      console.log("Using fallback query for companions:", query);
    }
    
    const userCompanions = await CompanionModel.findOne(query);
    const companions = userCompanions ? userCompanions.companions : [];
    
    console.log(`User has ${companions.length} companions:`, companions);
    
    res.json({ 
      companions,
      totalCount: companions.length,
      maxCount: COMPANION_LIST.length,
      availableCompanions: COMPANION_LIST.filter(c => !companions.includes(c))
    });
  } catch (error) {
    console.error("Failed to fetch companions:", error);
    res.status(500).json({ error: "동료 정보를 가져올 수 없습니다." });
  }
});
